#!/bin/bash

set -euo pipefail

[ -d /c ] || mkdir /c
[ -d /d ] || mkdir /d
[ -d /wim ] || mkdir /wim
[ -d /iso ] || mkdir /iso

dialog(){
	/usr/bin/dialog --backtitle "Windows.ova v. $(< /etc/version)" "$@"
}

check_iso(){
	if mount /dev/sr0 /iso; then
		# If there's no install.cmd, this must not be the iso we want
		if [ ! -e /iso/install.cmd ]; then
			umount /iso
			return
		fi
		echo ',,7,*;' | sfdisk /dev/sdb
		mkfs.ntfs -f -L data /dev/sdb1
		mount /dev/sdb1 /d
		rsync -Pa /iso/ /d/
		if [ -e /d/variables.txt ]; then
			. /d/variables.txt
		fi
		umount /d
		umount /iso
		if [ -n "$poweroff" ]; then
			poweroff -f
		else
			echo "We're done! The iso can be removed and this OVA can be exported."
			echo "Press enter to continue"
			read  _
			poweroff -f
		fi
	fi
}

version=""
localmirror=""
poweroff=""

# Since we've been booted with a valid cdrom we should copy it to d, then
# shutdown
check_iso
if ! mount /dev/sdb1 /d; then
	echo ',,7,*;' | sfdisk /dev/sdb
	mkfs.ntfs -f -L data /dev/sdb1
	mount /dev/sdb1 /d
fi

# Fetch the url= from /proc/cmdline and wget -r -np it to /d
cmdline_url="$(grep -o ' url=[^ ]*' /proc/cmdline || true)"
if [ -n "$cmdline_url" ]; then
	echo "Found cmdline_url=\"$cmdline_url\""
	cd /d
	wget -r -np -nH "${cmdline_url:5}"
	find . -type f
	cd /
fi

if [ -e /d/variables.txt ]; then
	. /d/variables.txt
	# strip linefeed incase the file is in dos format
	version="${version%%$'\r'}"
	localmirror="${localmirror%%$'\r'}"
fi

cmdline_version="$(grep -o ' version=[^ ]*' /proc/cmdline || true)"
if [ -n "$cmdline_version" ]; then
	echo "Found cmdline_version=\"$cmdline_version\""
	version="${cmdline_version:9}"
fi
cmdline_localmirror="$(grep -o ' localmirror=[^ ]*' /proc/cmdline || true)"
if [ -n "$cmdline_localmirror" ]; then
	echo "Found cmdline_localmirror=\"$cmdline_localmirror\""
	localmirror="${cmdline_localmirror:13}"
fi

cmd="$(echo dialog --title '"Windows Version Selection"' --no-tags --radiolist '"Select a Windows version to install"' 20 60 13 $(awk -F, '{print $1,"\"" $3 "\"","off"}' /etc/versions) | sed 's/off/on/')"
if [ -z "$version" ]; then
	version="$(eval "$cmd" 3>&2 2>&1 1>&3)"
fi

# Allow just overriding of the Autounattend.xml file
if [ -e "/d/Autounattend.xml" ]; then
	au="/d/Autounattend.xml"
elif [ -e "/d/${version}/Autounattend.xml" ]; then
	au="/d/${version}/Autounattend.xml"
else
	au="/au/${version}.xml"
fi

if [ -z "$version" ]; then
	poweroff -f
fi

URL="$(awk -F, "\$1 == \"$version\" {print \$5}" /etc/versions)"
SHA1SUM="$(awk -F, "\$1 == \"$version\" {print \$4}" /etc/versions)"

# If local mirror isn't set, ask the user about it
if [ -z "$localmirror" ]; then
	localmirror="$(dialog --title "Mirror selection" --inputbox "Enter URL of local mirror. This can be left blank." 8 60 3>&2 2>&1 1>&3)"
fi
# if localmirror is set to none, then unset it
if [ "$localmirror" = "none" ]; then
	localmirror=""
fi

# if local mirror is set, pull from there instead
if [ -n "$localmirror" ]; then
	echo "Local mirror is $localmirror"
	URL="$localmirror/$(basename "$URL")"
fi

if ! [ -e /dev/sda1 ]; then
	if mount /dev/sda /c; then
		rsync -a --exclude initramfs.gz --exclude kernel.gz /c/ /newc
	elif mount /dev/sr0 /c; then
		rsync -a --exclude initramfs.gz --exclude kernel.gz /c/ /newc
	else
		echo "How did you get here?"
		bash
	fi
	umount /c
	rm -f /newc/initramfs.gz
	rm -f /newc/kernel.gz
	echo ',,83,*;' | sfdisk /dev/sda
	mkfs.ext4 /dev/sda1
	bootlace.com /dev/sda
	mount /dev/sda1 /c
	rsync -a /newc/ /c
	rm -rf /newc
fi


cd /c
aria2c -U 'Wget/1.19.5 (linux-gnu)' -x 8 -s 8 --check-certificate=false --file-allocation=prealloc  "$URL" -o "/${version}.iso"
sync

echo "Checking iso"
echo "$SHA1SUM /c/${version}.iso" | sha1sum -c >/dev/null
if [ $? != 0 ]; then
	echo "Checksum failed"
	read -r _
fi

cd /d
7z x "/c/${version}.iso"
wimmountrw /d/sources/boot.wim 2 /wim
echo "au: $au"
cp "$au" /wim/Autounattend.xml
wimunmount --commit /wim
cd /

sync
sync
sync

until umount /d; do sync; sleep 1; done
until umount /c; do sync; sleep 1; done

exit 0
